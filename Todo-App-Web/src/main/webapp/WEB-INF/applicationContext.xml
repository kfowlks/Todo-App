<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"       
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/jdbc 
       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
	<!-- enable component scanning and autowire (beware that this does not enable 
		mapper scanning!) -->

    <!-- load H2 jdbc properties -->
    <context:property-placeholder location="classpath:jdbc-h2.properties"/>

	<context:component-scan base-package="org.keycloak.adapters.springsecurity, com.gmail.fowlk1kd" />

    <security:http auto-config="false" entry-point-ref="keycloakAuthenticationEntryPoint">
        <security:custom-filter ref="keycloakPreAuthActionsFilter" before="LOGOUT_FILTER" />
        <security:custom-filter ref="keycloakAuthenticationProcessingFilter" before="FORM_LOGIN_FILTER" />
        <security:intercept-url pattern="/customers**" access="ROLE_USER" />
        <security:intercept-url pattern="/admin**" access="ROLE_ADMIN" />
        <security:custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />
    </security:http>

	<security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="keycloakAuthenticationProvider" />
    </security:authentication-manager>


    <bean id="adapterDeploymentContext" class="org.keycloak.adapters.springsecurity.AdapterDeploymentContextFactoryBean">
        <constructor-arg value="/WEB-INF/keycloak.json" />
    </bean>

    <bean id="keycloakAuthenticationEntryPoint" class="org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationEntryPoint" />
    <bean id="keycloakAuthenticationProvider" class="org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider" />
    <bean id="keycloakPreAuthActionsFilter" class="org.keycloak.adapters.springsecurity.filter.KeycloakPreAuthActionsFilter" />
    <bean id="keycloakAuthenticationProcessingFilter" class="org.keycloak.adapters.springsecurity.filter.KeycloakAuthenticationProcessingFilter">
        <constructor-arg name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="keycloakLogoutHandler" class="org.keycloak.adapters.springsecurity.authentication.KeycloakLogoutHandler">
        <constructor-arg ref="adapterDeploymentContext" />
    </bean>

    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg name="logoutSuccessUrl" value="/" />
        <constructor-arg name="handlers">
            <list>
                <ref bean="keycloakLogoutHandler" />
                <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
            </list>
        </constructor-arg>
        <property name="logoutRequestMatcher">
            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                <constructor-arg name="pattern" value="/sso/logout**" />
                <constructor-arg name="httpMethod" value="GET" />
            </bean>
        </property>
    </bean>


	<bean id="dataSource2" class="com.zaxxer.hikari.HikariDataSource">

		<constructor-arg>
			<bean class="com.zaxxer.hikari.HikariConfig">
				<constructor-arg>
					<props>
						<prop key="dataSource.url">${jdbc.url}</prop>
						<prop key="dataSource.user">${jdbc.user}</prop>
						<prop key="dataSource.password" >${jdbc.password}</prop>
					</props>
				</constructor-arg>
				<property name="dataSourceClassName" value="org.h2.jdbcx.JdbcDataSource" />
			</bean>
		</constructor-arg>
	</bean>

	<jdbc:initialize-database data-source="dataSource2">
        <jdbc:script location="classpath:db/migration/V1_0__initial_load.sql"/>
        <!-- <jdbc:script location="classpath:test-data.sql"/> -->
    </jdbc:initialize-database>
    <!-- 
	<jdbc:embedded-database id="dataSource2" type="HSQL">
		<jdbc:script location="classpath:db/migration/V1_0__initial_load.sql" />
	</jdbc:embedded-database>
 -->
 
	<bean id="sql2o" class="org.sql2o.Sql2o">
		<constructor-arg type='javax.sql.DataSource' ref='dataSource2' />
	</bean>



</beans>