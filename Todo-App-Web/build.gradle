buildscript {
    repositories {
    	mavenLocal()
		jcenter()
        maven {
            url 'http://dl.bintray.com/cjstehno/public'
        }
    }
    dependencies {
        classpath 'gradle-templates:gradle-templates:1.5'
		classpath 'org.akhikhl.gretty:gretty:1.1.8'
		classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'		
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'templates'
apply plugin: "org.akhikhl.gretty"
apply plugin: 'org.flywaydb.flyway'

version = '1.0'
sourceCompatibility = '1.7'
targetCompatibility = '1.7'
defaultTasks 'clean', 'war'

flyway {
    url = 'jdbc:hsqldb:file:hsqldb/totl'
    user = 'sa'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Base', 
		'Implementation-Version': version,
		'Implementation-Vendor-Id': version,
		'Implementation-Vendor': version
    }
}

// The below lines are needed to add jar(s) found in the lib dir the ability to be resolved by gradle dependency 
eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = false
    }
}

task('wrapper', type: Wrapper) {
  gradleVersion = '2.2.1'
}

configurations.all {
   println 'Building Project Type ' + buildtype
   resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.springframework') {
			details.useVersion '4.2.5.RELEASE'
		}
	}
}

repositories {
    mavenCentral()
    
    maven {
        url "https://github.com/aaberg/aaberg_mvn_repo/raw/master"
    }
}

dependencies {
	
	
	compile project(':Todo-App-API')
	compile project(':Todo-App-Common')
	
	providedCompile 'javax.servlet:servlet-api:2.5'
	providedCompile fileTree(dir: 'lib', includes: ['*.jar'])

	compile 'com.h2database:h2:1.4+'
	compile 'org.sql2o:sql2o:1.5.+'
	
	compile 'org.eclipse.jetty:jetty-parent:9'
	compile 'net.sourceforge.stripes:stripes:1.5.8'
    compile 'org.slf4j:slf4j-api:1.6.1'
    compile 'org.slf4j:slf4j-log4j12:1.6.1'
    
    compile group: 'org.keycloak', name: 'keycloak-spring-security-adapter', version: '1.9.4.Final'
    compile 'org.springframework:spring-web:$spring_version'
    compile 'org.springframework:spring-jdbc:$spring_version'
    compile 'org.springframework:spring-test:$spring_version'
    compile 'org.springframework.security:spring-security-web:4.1+'
	compile 'org.testng:testng:6.8.8'
	compile group: 'org.jboss.logging', name: 'jboss-logging', version: '3.3.0.Final'
    /* Web UI components */    
    compile 'org.webjars:x-editable-bootstrap3:1.5.1'
    compile 'org.webjars.bower:bootstrap:3.3.4'    
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
        
    testCompile('com.h2database:h2:1.4+')
    testCompile("com.zaxxer:HikariCP-java6:+")
    testCompile group: 'org.testng', name: 'testng', version: '6.8.8'
    
    // The below lines are needed to add the specified lib(s) to the gretty container runtime class path
    gretty 'com.h2database:h2:1.4+'
    gretty 'com.zaxxer:HikariCP-java6:+'
    // gretty 'org.keycloak:keycloak-jetty92-adapter-dist:+'
    // gretty 'org.keycloak:keycloak-jetty92-adapter:1.9.4.Final'
	
    testRuntime 'com.zaxxer:HikariCP-java6:+'
    testRuntime 'com.h2database:h2:1.4+'
    
    runtime "taglibs:standard:1.1.2","javax.servlet:jstl:1.1.2"
    
    // Keycloak
    // compile 'org.keycloak:keycloak-jetty92-adapter:1.9.4.Final'
    // http://mvnrepository.com/artifact/org.keycloak/keycloak-adapter-spi

}

gretty {
  //port = 10101
  //jvmArg ['--add-to-startd=keycloak']
  httpPort = 10101
  servicePort = 19090
  statusPort = 19091
}



test {

    useTestNG {
         suites 'src/test/resources/testng.xml'
         //sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir	    
     }
  
    // show standard out and standard error of the test JVM(s) on the console
  	testLogging.showStandardStreams = true
     
     // listen to standard out and standard error of the test JVM(s)
  	onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  	}
 }

war {
    baseName = buildwarname
    webXml   = file('deployment/totl/'+buildtype+'/war/WEB-INF/web.xml')
}
